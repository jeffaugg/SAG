// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String    @id @default(uuid()) @db.Uuid
  nome      String
  cargo     Cargo
  cpf       String    @unique
  senha     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  usuarioPoliclinicas UsuarioPoliclinica[]
  usuarioUbs          UsuarioUbs[]

  @@map("usuarios")
}

model Policlinica {
  id          String @id @default(uuid()) @db.Uuid
  contato     String
  nome        String
  localizacao String

  cnes String @unique
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  usuarioPoliclinicas UsuarioPoliclinica[]

  @@map("policlinica")
}

model UsuarioPoliclinica {
  id String @id @default(uuid()) @db.Uuid

  cnes        String
  policlinica Policlinica @relation(fields: [cnes], references: [cnes], onDelete: NoAction)

  usuarioId String  @db.Uuid
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: NoAction)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([cnes, usuarioId])
  @@index([cnes], name: "idx_policlinica_cnes")
  @@index([usuarioId], name: "idx_policlinica_usuario_id")
  @@map("usuarios_policlinica")
}

model UBS {
  id          String @id @default(uuid()) @db.Uuid
  contato     String
  nome        String
  localizacao String

  cnes String @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  usuarioUbs UsuarioUbs[]

  @@map("ubs")
}

model UsuarioUbs {
  id String @id @default(uuid()) @db.Uuid

  cnes String
  ubs  UBS    @relation(fields: [cnes], references: [cnes], onDelete: NoAction)

  usuarioId String  @db.Uuid
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: NoAction)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([cnes, usuarioId])
  @@index([cnes], name: "idx_ubs_cnes")
  @@index([usuarioId], name: "idx_ubs_usuario_id")
  @@map("usuarios_ubs")
}

enum Cargo {
  Enfermeiro
  Medico
  ADM
}

model Paciente {
  id   String @id @default(uuid()) @db.Uuid
  nome String
  cpf  String @unique
  telefone String? 
  endereco String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  gestacoes Gestacao[]  

  @@map("pacientes")
}

enum Status {
  Pendente
  Fechado
}

model Gestacao {
  id   String @id @default(uuid())
  inicio DateTime @default(now())
  fim  DateTime?
  status Status 
  pacienteId String @db.Uuid
  paciente Paciente @relation(fields: [pacienteId], references: [id], onDelete: NoAction)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  @@map("gestacoes")
}


